package com.willianbrendo.workshopmongo.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.willianbrendo.workshopmongo.domain.Post;
import com.willianbrendo.workshopmongo.domain.User;
import com.willianbrendo.workshopmongo.repositories.PostRepository;
import com.willianbrendo.workshopmongo.services.exceptions.ObjectNotFoundException;

@Service // üéØ Anota√ß√£o que registra esta classe como um componente de servi√ßo do Spring
public class PostService {

	// Inje√ß√£o de depend√™ncia do Reposit√≥rio
    @Autowired 
    private PostRepository repository; 
    // O Spring inicializa automaticamente o 'repository' quando o PostService √© criado.

    /**
     * Retorna todos os usu√°rios cadastrados no banco de dados MongoDB.
     * @return Uma lista de objetos Post.
     */
    public List<Post> findAll() {
        // O m√©todo findAll() √© herdado do MongoRepository e busca todos os documentos da cole√ß√£o "users".
        return repository.findAll();
    }
    
    /**
     * Busca um usu√°rio pelo seu ID, lan√ßando exce√ß√£o se n√£o for encontrado.
     * @param id O ID (String) do usu√°rio a ser buscado.
     * @return O objeto User, se encontrado.
     */
    public Post findById(String id) {
        // O findById retorna um Optional<User>
        Optional<Post> obj = repository.findById(id);
        
        // üéØ Se o Optional estiver vazio (ID n√£o existe), lan√ßa ResourceNotFoundException (404)
        // Se contiver um User, retorna o objeto User.
        return obj.orElseThrow(() -> new ObjectNotFoundException(id));
    }
    
    /**
     * Insere um novo usu√°rio no banco de dados.
     * @param obj O objeto User (Entidade) a ser salvo.
     * @return O objeto User salvo, contendo o ID gerado pelo MongoDB.
     */
    public Post insert(Post obj) {
        // 1. Antes de salvar, garantimos que o ID do objeto √© nulo.
        // O MongoDB ir√° gerar um novo ID.
        obj.setId(null); 
        
        // 2. O m√©todo save() do MongoRepository realiza o INSERT quando o ID √© nulo.
        return repository.save(obj);
    }
    
    /**
     * Deleta um usu√°rio pelo ID, verificando primeiro se ele existe.
     * @param id O ID (String) do usu√°rio a ser deletado.
     */
    public void delete(String id) {
        
        // 1. Garante o tratamento de erro 404: 
        // Usamos o findById para verificar a exist√™ncia. Se n√£o encontrar,
        // o findById lan√ßa a ResourceNotFoundException.
        findById(id); 
        
        // 2. Se o findById n√£o lan√ßou exce√ß√£o, o recurso existe e pode ser deletado.
        repository.deleteById(id);
        
        // NOTA: Em bancos de dados relacionais, aqui seria o ponto para tratar 
        // a DataIntegrityViolationException (erro 400), mas no MongoDB NoSQL puro,
        // a exclus√£o de um documento pai n√£o √© automaticamente impedida pela FK,
        // ent√£o a l√≥gica fica mais simples.
    }
    
    
    /**
     * Atualiza um usu√°rio existente no banco de dados.
     * @param id O ID (String) do usu√°rio a ser atualizado.
     * @param obj O objeto User com os novos dados.
     * @return O objeto User atualizado.
     */
    public Post update(String id, Post obj) {
        
        // 1. Busca a Entidade existente. Se n√£o encontrar, lan√ßa 404.
        // Usamos o findById que j√° implementamos para garantir o tratamento 404.
        Post entity = findById(id); 
        
        // 2. Copia os dados do objeto 'obj' (que veio do Controller) para a 'entity' (que veio do banco)
        updateData(entity, obj);
        
        // 3. O m√©todo save() do MongoRepository realiza o UPDATE quando o ID n√£o √© nulo.
        return repository.save(entity);
    }

    /**
     * M√©todo auxiliar privado para copiar os dados relevantes do objeto de origem (obj) 
     * para o objeto destino (entity), que est√° sendo monitorado.
     */
    private void updateData(Post entity, Post obj) {
        entity.setTitle(obj.getTitle());
        entity.setDate(obj.getDate());
        entity.setBody(obj.getBody());
        entity.setAuthor(obj.getAuthor());
    }
}
